{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["rxInterval","interval","App","subscribtionRef","useRef","useState","Date","time","setTime","going","setGoing","clicked","setClicked","timeFixer","useCallback","str","toString","length","stopTimer","current","unsubscribe","startTimer","subscribe","n","setUTCSeconds","getUTCSeconds","handleTimerStart","handleWait","timer","handleReset","alert","className","getUTCHours","getUTCMinutes","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAKMA,EAAaC,YAAS,KAsEbC,MApEf,WACE,IAAMC,EAAkBC,mBADX,EAGWC,mBAAS,IAAIC,KAAK,IAH7B,mBAGNC,EAHM,KAGAC,EAHA,OAIaH,oBAAS,GAJtB,mBAINI,EAJM,KAICC,EAJD,OAKiBL,oBAAS,GAL1B,mBAKNM,EALM,KAKGC,EALH,KAOPC,EAAYC,uBAAY,SAACC,GAC7B,OAAOA,EAAIC,WAAWC,OAAS,EAAI,IAAMF,EAAMA,IAC9C,IAEGG,EAAYJ,uBAAY,WAC5BX,EAAgBgB,QAAQC,cACxBV,GAAS,KACR,IAEGW,EAAaP,uBAAY,WAC7BX,EAAgBgB,QAAUnB,EAAWsB,WAAU,SAACC,GAAD,OAC7Cf,EAAQ,IAAIF,KAAKC,EAAKiB,cAAcjB,EAAKkB,gBAAkB,QAE7Df,GAAS,KACR,IAEGgB,EAAmBZ,uBAAY,WAC9BL,EAGHS,IAFAG,MAID,CAACZ,IAEEkB,EAAab,uBAAY,WACzBH,EACFO,KAEAN,GAAW,GACXgB,YAAM,KAAKN,WAAU,SAACf,GAAD,OAAUK,GAAW,SAE3C,CAACD,IAEEkB,EAAcf,uBAAY,WAC9B,IACEI,IACAV,EAAQ,IAAIF,KAAKC,EAAKiB,cAAc,KACpCH,IACA,SACAS,MAAM,yBAEP,IAEH,OACE,sBAAKC,UAAU,sBAAf,UACE,sBAAKA,UAAU,4BAAf,UACE,6BAAKlB,EAAUN,EAAKyB,iBADtB,IAEE,6BAAKnB,EAAUN,EAAK0B,mBAFtB,IAGE,6BAAKpB,EAAUN,EAAKkB,sBAEtB,sBAAKM,UAAU,yBAAf,UACE,wBAAQG,QAAS,kBAAMR,KAAvB,SACGjB,EAAQ,OAAS,UAEpB,wBAAQyB,QAAS,kBAAMP,KAAvB,kBACA,wBAAQO,QAAS,kBAAML,KAAvB,0BCzDOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd79ed8e.chunk.js","sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\nimport { timer, interval } from \"rxjs\";\n\nimport \"./App.scss\";\n\nconst rxInterval = interval(1000);\n\nfunction App() {\n  const subscribtionRef = useRef();\n\n  const [time, setTime] = useState(new Date(0));\n  const [going, setGoing] = useState(false);\n  const [clicked, setClicked] = useState(false);\n\n  const timeFixer = useCallback((str) => {\n    return str.toString().length < 2 ? \"0\" + str : str;\n  }, []);\n\n  const stopTimer = useCallback(() => {\n    subscribtionRef.current.unsubscribe();\n    setGoing(false);\n  }, []);\n\n  const startTimer = useCallback(() => {\n    subscribtionRef.current = rxInterval.subscribe((n) =>\n      setTime(new Date(time.setUTCSeconds(time.getUTCSeconds() + 1)))\n    );\n    setGoing(true);\n  }, []);\n\n  const handleTimerStart = useCallback(() => {\n    if (!going) {\n      startTimer();\n    } else {\n      stopTimer();\n    }\n  }, [going]);\n\n  const handleWait = useCallback(() => {\n    if (clicked) {\n      stopTimer();\n    } else {\n      setClicked(true);\n      timer(300).subscribe((time) => setClicked(false));\n    }\n  }, [clicked]);\n\n  const handleReset = useCallback(() => {\n    try {\n      stopTimer();\n      setTime(new Date(time.setUTCSeconds(0)));\n      startTimer();\n    } catch {\n      alert(\"Nothing to reset:)\");\n    }\n  }, []);\n\n  return (\n    <div className=\"App column centered\">\n      <div className=\"row sp-btw timer centered\">\n        <h1>{timeFixer(time.getUTCHours())}</h1>:\n        <h1>{timeFixer(time.getUTCMinutes())}</h1>:\n        <h1>{timeFixer(time.getUTCSeconds())}</h1>\n      </div>\n      <div className=\"row sp-btw btn-wrapper\">\n        <button onClick={() => handleTimerStart()}>\n          {going ? \"Stop\" : \"Start\"}\n        </button>\n        <button onClick={() => handleWait()}>Wait</button>\n        <button onClick={() => handleReset()}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}